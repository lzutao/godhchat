// Package dhkx implements Diffie-Hellman key exchange
//
// dhkey.go
//     NewDHKey()
//     PublicKey()
//     GetMODPGroup()
//     SharedSecretKey()
//
// Example:
// 	  a := dhkx.NewDHKey(0)
// 	  b := dhkx.NewDHKey(0)
//
// 	  ga := a.PublicKey()
// 	  gb := b.PublicKey()
//
// 	  gab := a.SharedSecretKey(gb)
// 	  gba := b.SharedSecretKey(ga)
//
// 	  if gab.Cmp(gba) == 0 {
// 	      fmt.Println("Shared keys match.")
// 	      fmt.Printf("Key: %v\n", gab)
// 	  } else {
// 	      fmt.Println("Shared secrets didn't match!")
// 	      fmt.Println("Shared secret A: ", gab)
// 	      fmt.Println("Shared secret B: ", gba)
// 	  }
// >>> Written by 15520599
package dhkx

import (
	"crypto/rand"
	"errors"
	"math/big"
)

// BLOCKSIZE represents number of random bytes
const BLOCKSIZE = 32

// An DHGroup represents an Diffie-Hellman group for Internet Key Exchange
type DHGroup struct {
	p *big.Int // public prime modulus
	g *big.Int // public generator
}

// P returns a public modulus of a DHGroup
func (group *DHGroup) P() *big.Int {
	return group.p
}

// G retuns a public generator of a DHGroup
func (group *DHGroup) G() *big.Int {
	return group.g
}

// DHKey represents a exchanged Diffie-Hellman key
type DHKey struct {
	a  *big.Int // secret integer
	ga *big.Int // public key, ga = g ^ a mod p

	group *DHGroup // prime modulus and generator
}

// NewDHKey returns an initilized DHKey
func NewDHKey(groupID int) (key *DHKey, err error) {
	group, err := GetMODPGroup(groupID)
	if err != nil {
		return nil, err
	}
	b := make([]byte, BLOCKSIZE)
	if _, err := rand.Read(b); err != nil {
		return nil, err
	}
	a := new(big.Int).SetBytes(b)

	key = new(DHKey)
	key.a = a
	key.ga = new(big.Int).Exp(group.g, a, group.p)
	key.group = group
	return key, nil
}

// PublicKey returns a DH public key named ga where ga = g^a mod p
func (key *DHKey) PublicKey() (ga *big.Int) {
	return key.ga
}

// checkPublicKey checks if partner's public key is valid based on
// NIST SP800-56 with following condition:
//         2 <= g^b <= p-2
//     and Lagrange for safe primes
//         g^(bq) = 1 (mod p)
//     where q = (p - 1)/2
func (key *DHKey) checkPublicKey(gb *big.Int) bool {
	p := key.group.p
	one := big.NewInt(1)
	two := big.NewInt(2)
	pSub1 := new(big.Int).Sub(p, one)
	pSub2 := new(big.Int).Sub(p, two)
	if gb.Cmp(two) == 1 && gb.Cmp(pSub2) == -1 {
		q := new(big.Int).Div(pSub1, two)
		sophi := new(big.Int).Exp(gb, q, p)
		if sophi.Cmp(one) == 0 {
			return true
		}
	}
	return false
}

// SharedSecretKey returns the shared secret key g^(ab) mod p
func (key *DHKey) SharedSecretKey(gb *big.Int) (n *big.Int, err error) {
	if !key.checkPublicKey(gb) {
		err := errors.New("Bad public key from other party")
		return nil, err
	}
	shared := new(big.Int).Exp(gb, key.a, key.group.p)
	return shared, nil
}

// Bytes returns public key from a DHKey instance.
func (key *DHKey) Bytes() []byte {
	if key.ga == nil {
		return nil
	}
	// if key.group != nil {
	// 	// len = ceil(bitLen(y) / 8)
	// 	blen := (key.group.p.BitLen() + 7) / 8
	// 	ret := make([]byte, blen)
	// 	copyWithLeftPad(ret, key.ga.Bytes())
	// 	return ret
	// }
	return key.ga.Bytes()
}

func (key *DHKey) String() string {
	if key.ga == nil {
		return ""
	}
	return key.ga.String()
}

// GetMODPGroup fetches a DHGroup by its ID as defined in either RFC 2409 or
// RFC 3526.
// If you are unsure what to use use group ID 0 for a sensible default value
// Current minimum recommendation is 2048 bit with id=14.
func GetMODPGroup(groupID int) (group *DHGroup, err error) {
	if groupID <= 0 {
		groupID = 14
	}
	switch groupID {
	case 1:
		p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A63A3620FFFFFFFFFFFFFFFF", 16)
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	case 2:
		p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF", 16)
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	// 1536-bit
	case 5:
		p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF", 16)
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	// 2048-bit
	case 14:
		p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF", 16)
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	// 3072-bit
	case 15:
		p, _ := new(big.Int).SetString
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	// 4096-bit
	case 16:
		p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF", 16)
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	// 6144-bit
	case 17:
		p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C93402849236C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AACC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58BB7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E6DCC4024FFFFFFFFFFFFFFFF", 16)
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	// 8192-bit
	case 18:
		p, _ := new(big.Int).SetString
		group = &DHGroup{
			g: big.NewInt(2),
			p: p,
		}
	default:
		group = nil
		err = errors.New("DH: Unknown group")
	}
	return
}

// CreateMODPGroup enables users to create their own custom DHGroup.
// Most users will not however want to use this function, and should prefer
// the use of GetMODPGroup which supplies DHGroups defined in RFCs 2409 and 3526
//
// WARNING! You should only use this if you know what you are doing. The
// behavior of the group returned by this function is not defined if prime is
// not in fact prime.
func CreateMODPGroup(prime, generator *big.Int) (group *DHGroup) {
	group = &DHGroup{
		g: generator,
		p: prime,
	}
	return
}
